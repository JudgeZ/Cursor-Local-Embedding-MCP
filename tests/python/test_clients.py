"""Python client CLI integration tests (red phase placeholders)."""

from __future__ import annotations

import json
import subprocess
import sys
from pathlib import Path
from typing import Any

import pytest

FIXTURE_ROOT = Path(__file__).resolve().parent.parent / "fixtures" / "python"


def _load_fixture(transport: str, kind: str) -> dict[str, Any]:
    path = FIXTURE_ROOT / transport / f"{kind}.json"
    if not path.exists():
        pytest.skip(
            "client fixtures are generated by the GitHub Action; download the artifact "
            "and unpack tests/fixtures/python before running locally",
        )
    with path.open("r", encoding="utf-8") as handle:
        return json.load(handle)


@pytest.mark.parametrize("transport", ["stdio", "http", "tls"])
def test_python_client_cli_transcripts(transport: str, update_transcripts: bool) -> None:
    request_payload = _load_fixture(transport, "request")
    response_payload = _load_fixture(transport, "response")

    assert request_payload["client"] == "python"
    assert response_payload["transport"] == transport

    cli_command = [
        sys.executable,
        "-m",
        "clients.python.client",
        "--transport",
        transport,
        "--record-transcript",
        str(Path("artifacts/python") / f"{transport}.json"),
    ]

    if update_transcripts:
        cli_command.append("--update-transcripts")

    # Placeholder subprocess invocation reserved for future implementation.
    with pytest.raises(subprocess.CalledProcessError):
        subprocess.run(cli_command, check=True)

    pytest.fail(
        "not yet implemented: python client subprocess invocation and transcript diffing",
    )
